"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = __importDefault(require("node-fetch"));
var cookie_1 = __importDefault(require("./network/cookie"));
var ROUTES = {
    api: 'https://my.callofduty.com/api/papi-client/stats/cod/v1/title/mw/platform/%PLATFORM%/gamer/%USER%/profile/type/mw',
    register: 'https://profile.callofduty.com/cod/mapp/registerDevice',
    auth: 'https://profile.callofduty.com/cod/mapp/login'
};
var cookies = new cookie_1.default();
var Wrapzone;
(function (Wrapzone_1) {
    var _this = this;
    var fetchPlayerData = function (platform, userName) {
        var target = ROUTES.api
            .replace(/%PLATFORM%/, platform)
            .replace(/%USER%/, userName)
            .replace(/#/, '%23');
        return node_fetch_1.default(target, {
            headers: {
                Cookie: cookies.toString()
            }
        })
            .then(function (res) {
            return res;
        })
            .then(function (res) { return res.json(); })
            .then(function (json) { return json.data; });
    };
    Wrapzone_1.authenticate = function (email, password) {
        var deviceId = Math.random().toString();
        return node_fetch_1.default(ROUTES.register, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                deviceId: deviceId
            })
        })
            .then(function (res) { return res.json(); })
            .then(function (json) {
            if (json.status !== 'success' || !json.data) {
                throw new Error('Error registering at the CoD API, please retry.');
            }
            return node_fetch_1.default(ROUTES.auth, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': "Bearer " + json.data.authHeader,
                    'x_cod_device_id': deviceId
                },
                body: JSON.stringify({
                    email: email,
                    password: password
                })
            });
        })
            .then(function (res) { return res.json(); })
            .then(function (json) {
            if (!json.success) {
                throw new Error('Authentication failed! Please retry and confirm your login data.');
            }
            cookies.set('atkn', json.atkn);
            cookies.set('rtkn', json.rtkn);
            cookies.set('ACT_SSO_COOKIE', json.s_ACT_SSO_COOKIE);
            return;
        });
    };
    var Wrapzone = /** @class */ (function () {
        function Wrapzone(platform, userName, playerData) {
            this.platform = platform;
            this.userName = userName;
            this.playerData = playerData;
        }
        /**
         * Fetches the playerdata and saves it in the instance
         * @param platform The platform the player is on
         * @param userName The name of the user (battle.net also requires id, e.g. name#12345)
         */
        Wrapzone.prototype.setPlayerData = function (platform, userName) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, fetchPlayerData(platform, userName)];
                        case 1:
                            _a.playerData = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Re-runs the initial request in order to get updated data
         */
        Wrapzone.prototype.updatePlayerData = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.setPlayerData(this.platform, this.userName)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(Wrapzone.prototype, "raw", {
            /**
             * Returns the raw json that was retrieved from the cod API
             */
            get: function () {
                return this.playerData;
            },
            enumerable: true,
            configurable: true
        });
        Wrapzone.prototype.getModeStats = function (mode) {
            return this.playerData.lifetime.mode[mode];
        };
        Wrapzone.prototype.getGlobalStats = function () {
            return this.playerData.lifetime.all.properties;
        };
        Wrapzone.prototype.getEquipStats = function (equip) {
            return this.getItemStats(equip);
        };
        Wrapzone.prototype.getWeaponStats = function (weapon) {
            return this.getItemStats(weapon);
        };
        Wrapzone.prototype.getItemStats = function (item) {
            var _a, _b;
            for (var _i = 0, _c = Object.values(this.playerData.lifetime.itemData); _i < _c.length; _i++) {
                var itemCategory = _c[_i];
                var properties = (_b = (_a = itemCategory) === null || _a === void 0 ? void 0 : _a[item]) === null || _b === void 0 ? void 0 : _b.properties;
                if (properties) {
                    return properties;
                }
            }
        };
        Wrapzone.prototype.getStreakStats = function (streak) {
            var _a, _b;
            for (var _i = 0, _c = Object.values(this.playerData.lifetime.scorestreakData); _i < _c.length; _i++) {
                var streakCategory = _c[_i];
                var properties = (_b = (_a = streakCategory) === null || _a === void 0 ? void 0 : _a[streak]) === null || _b === void 0 ? void 0 : _b.properties;
                if (properties) {
                    return properties;
                }
            }
        };
        return Wrapzone;
    }());
    Wrapzone_1.get = function (platform, userName) { return __awaiter(_this, void 0, void 0, function () {
        var playerData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetchPlayerData(platform, userName)];
                case 1:
                    playerData = _a.sent();
                    return [2 /*return*/, new Wrapzone(platform, userName, playerData)];
            }
        });
    }); };
})(Wrapzone || (Wrapzone = {}));
exports.default = Wrapzone;
